{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Arial-BoldMT;\f1\froman\fcharset0 Times-Roman;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl320\partightenfactor0

\f0\b\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Git Merge & git merge conflict
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 Start with a new repository (you can also use an existing repo) and an empty local directory.
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 1- Create a new branch
\f1\b0 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 	- git branch myBranch
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 2- Switch to your new branch
\f1\b0 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 	- git checkout myBranch
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 3- Confirm that you are in the new branch (myBranch)
\f1\b0 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 	- git branch
\f1 \

\f2 	- git branch -a (displays all branches)
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 4- Push your local branch to remote
\f1\b0 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 You have created a local branch, you need to push it to github
\f1 \

\f2 	- git push -u origin myBranch
\f1 \

\f2 Now, your new branch is visible in your github
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 Pull Request:
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 5- Create a file in your new branch & push it to github
\f1\b0 \
\pard\pardeftab720\li960\sl320\partightenfactor0

\f2 \cf2 if you navigate to your repo in github, you will see myBranch with the new file. The new file is not in the master branch.\'a0 Also, in your github you will see the "compare & pull request" notification.
\f1 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 	
\f1 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 6-\'a0 Make a pull request
\f1\b0 \

\f0\b 	
\f2\b0 In your github click:
\f1 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 	- pull request > new pull request > set base and compare branch > create pull request > add title >add comment (optional) > create pull request
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 You have pushed your pull, the next step is to respond to the review requests/ discuss collaborations with others, so you need to merge the pull request.
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 7- Merge pull request
\f1\b0 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 	There are two ways to merge pull reqeuest. 1, simply click the Merge pull request in your pull request in github. 2, through the command line.
\f1 \

\f2 	
\f1 \

\f2 	Go to terminal and checkout to master branch
\f1 \

\f2 	- git checkout master
\f1 \

\f2 	- git branch (to confirm that you are in the master branch)
\f1 \

\f2 	- git merge myBranch
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 	You need to push that merge up to github.
\f1 \

\f2 	- git push myBranch or git push origin myBranch
\f1 \

\f2 	you should be able to see the new file in your master branch
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 Your pull request is successfully merged, you can delete it by clicking the Delete branch in your pull request in github or through the command line.
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 If there is a merge conflict, the merge conflict message "can't automatically merge".
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 8- Deleting your branch
\f1\b0 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 delete your branch locally
\f1 \

\f2 	- git branch -d myBranch
\f1 \

\f2 	- git branch -D
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 Deleting your branch locally will only remove it locally. You can delete the remote tracking branch that is on github.
\f1 \

\f2 	- git push origin --delete myBranch
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f0\b \cf2 9- Merging conflicts
\f1\b0 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 open README file in master and add \'93this is master edit\'94 in line 2.
\f1 \

\f2 checkout to myBranch > open README file and add \'93this is myBranch edit\'94 in line 2.
\f1 \

\f2 add, commit and push each branch\uc0\u8232 
\f1 \

\f2 	- create pull request > > set base and compare branch > you will see the red message \'93can\'92t automatically merge\'94 > create pull request > add title >add comment (optional) > create pull request.\'a0 you get the warning message: "This branch has conflicts that must be resolved".\'a0 You can resolve it in github by clicking resolve conflicts in github or in command line by using your text editor
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 If you open the conflict file, you won't see it in the terminal. You have to checkout to master and run git merge myBranch then you will see the conflict message. Now, if you open README in your text editor, you will see the conflict message.
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 Compare the changes in your text editor, remove the conflict makers, save and exit your text editor.
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\pard\pardeftab720\sl320\partightenfactor0

\f2 \cf2 In terminal run:
\f1 \
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl320\partightenfactor0
\ls1\ilvl0
\f2 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git add .\
\ls1\ilvl0\kerning1\expnd0\expndtw0 \outl0\strokewidth0 {\listtext	\uc0\u8226 	}\expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 git commit -m "resolved merge conflict in README file"\uc0\u8232 \
\pard\pardeftab720\sl320\partightenfactor0
\cf2 If successful, you will see the "pull request successfully merged and closed" message in your git repo.
\f1 \
\pard\pardeftab720\partightenfactor0
\cf2 \
}